package geospatial.client;

import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import geospatial.thrift.Feature;
import org.apache.thrift.TException;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TSocket;
import geospatial.thrift.*;

import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.protocol.TProtocol;

/*
 * Created by cliff on 6/4/16.
 */
public class JavaClient {

	private static Scanner reader;
	private static Feature currentFeature;
	private static Socket serverSocket;
	private static InputStream in;

	public static void main(String[] args) {
		reader = new Scanner(System.in);
		try {
			try {
				serverSocket = new Socket("suchlol.com",6969);
				if (serverSocket.isConnected()) {
					System.out.println("Connected to suchlol.com");
				}
				in = serverSocket.getInputStream();
			} catch (IOException e) {
				e.printStackTrace();
			}

			new Thread(new Runnable()
			{
				public void run()
				{
					try {
						while (true) {
							byte[] buffer = new byte[1024];
							int read;
							read = in.read(buffer);
							String output = new String(buffer, 0, read);
							System.out.print("\nKafka Update: " + output + "\n");
							System.out.flush();
						}
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}).start();

			TTransport transport;
			transport = new TSocket("suchlol.com", 9090);
			transport.open();

			TProtocol protocol = new  TBinaryProtocol(transport);
			Geospatial.Client client = new Geospatial.Client(protocol);

			perform(client);

			transport.close();
		} catch (TException x) {
			x.printStackTrace();
		} 
		try {
			serverSocket.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	//Perform method used in autogenerated thrift code
	private static void perform(Geospatial.Client client) throws TException
	{
		boolean loop = true;
		while (loop) {
			printOptions();
			int input = reader.nextInt();
			reader.nextLine();
			System.out.println(input);
			switch (input) {
				case 1:
					//Create a new feature
					System.out.print("Enter the new point x: ");
					double x = reader.nextDouble();
					System.out.print("Enter the new point y: ");
					double y = reader.nextDouble();
					Point newPoint = new Point(x,y);
					System.out.print("Enter the new payload: ");
					reader.nextLine();
					String newPayload = reader.nextLine();
					currentFeature = client.createFeature(newPoint, newPayload);
					System.out.println("Your new feature is now your current feature: " + currentFeature.getId());
					break;
				case 2:
					//Get a feature based on id
					System.out.print("Enter the feature id: ");
					String id = reader.nextLine();
					currentFeature = client.getFeature(id);
					if (currentFeature != null) {
						System.out.println("Your current feature is now saved: " + currentFeature.getId());
					}
					else {
						System.out.println("That feature does not exist.");
					}
					break;
				case 3:
					//Get features in a rectangle based on 2 points
					System.out.print("Enter the top left x: ");
					double x1 = reader.nextDouble();
					System.out.print("Enter the top left y: ");
					double y1 = reader.nextDouble();
					System.out.print("Enter the bottom right x: ");
					double x2 = reader.nextDouble();
					System.out.print("Enter the bottom right y: ");
					double y2 = reader.nextDouble();
					reader.nextLine();
					Point newPoint_tl = new Point(x1,y1);
					Point newPoint_br = new Point(x2,y2);
					Rectangle rect = new Rectangle(newPoint_tl, newPoint_br);
					List<Feature> features = client.getFeaturesInRect(rect);
					currentFeature = selectFeature(features);
					break;
				case 4:
					//Update the current feature in the database
					if (currentFeature != null) {
						currentFeature = client.updateFeature(currentFeature);
						System.out.println("Your feature was updated successfully.");
					}
					else {
						System.out.println("You must have a non-null feature to update.");
					}
					break;
				case 5:
					//Delete the current feature
					boolean deleteSuccess = client.deleteFeature(currentFeature);
					if (currentFeature != null) {
						if (deleteSuccess) {
							System.out.println("Your feature was deleted successfully.");
						}
						else {
							System.out.println("Your feature was deleted unsuccessfully.");
						}
					}
					else {
						System.out.println("You need a non-null feature to delete.");
					}
					break;
				case 6:
					//Change the current feature's properties
					if (currentFeature == null) {
						System.out.println("You must have a non-null feature to change.");
						break;
					}
					System.out.println("Current feature: "+ currentFeature);
					boolean changeFeatureLoop = true;
					while (changeFeatureLoop) {
						printFeatureChangeOptions();
						int option = reader.nextInt();
						reader.nextLine();
						switch (option) {
							case 1:
								//Change the point of the feature
								System.out.print("Enter the new point x: ");
								double newX = reader.nextDouble();
								System.out.print("Enter the new point y: ");
								double newY = reader.nextDouble();
								reader.nextLine();
								newPoint = new Point(newX,newY);
								currentFeature = currentFeature.setPoint(newPoint);
								break;
							case 2:
								//Change the state of the feature
								System.out.print("Enter the new state (1 for clean or 2 for dirty): ");
								int newState = reader.nextInt();
								reader.nextLine();
								if (newState == 1) {
									currentFeature = currentFeature.setState(FeatureState.CLEAN);
								}
								else if (newState == 2){
									currentFeature = currentFeature.setState(FeatureState.DIRTY);
								}
								else {
									System.out.println("Please enter a valid state.");
								}
								break;
							case 3:
								//Change the payload of the feature
								System.out.print("Enter the new payload: ");
								newPayload = reader.nextLine();
								currentFeature = currentFeature.setPayload(newPayload);
								break;
							case 4:
								//Break loop
								changeFeatureLoop = false;
								break;
							default:
								System.out.println("Enter a valid option.");
								break;
						}
					}
					break;
				case 7:
					//Get all features from database
					Point topLeft = new Point(-180, 90);
					Point bottomRight = new Point(180, -90);
					Rectangle allRect = new Rectangle(topLeft,bottomRight);
					List<Feature> allFeatures = client.getFeaturesInRect(allRect);
					currentFeature = selectFeature(allFeatures);
					break;
				case 8:
					//Break loop
					loop = false;
					break;
				default:
					System.out.println("Please enter a valid option.");
					break;
			}
		}


	}

	//Selects a feature based on id from the list of features returned from query (called above)
	private static Feature selectFeature(List<Feature> features) {
		System.out.println("\nFeature id's:");
		int count = 1;
		Map<Integer,Feature> featureMap = new HashMap<>();
		for (Feature f: features) {
			featureMap.put(count,f);
			System.out.println(count + ". " + f.getId());
			count++;
		}
		System.out.println();
		System.out.print("Enter the number of the id of the feature you want: ");
		int number = reader.nextInt();
		reader.nextLine();
		for (int i:featureMap.keySet()) {
			if (i == number) {
				System.out.println("Feature saved.");
				return featureMap.get(i);
			}
		}
		System.out.println("No feature saved.");
		return null;
	}

	private static void printOptions() {
		System.out.println("\nOptions:");
		System.out.println("1. Create Feature");
		System.out.println("2. Get Feature");
		System.out.println("3. Get Features in Rectangle");
		System.out.println("4. Update Current Feature");
		System.out.println("5. Delete Current Feature");
		System.out.println("6. Edit Current Feature");
		System.out.println("7. Select from all features");
		System.out.println("8. Exit");
		System.out.println();
		System.out.print("Enter your selection: ");
	}

	private static void printFeatureChangeOptions() {
		System.out.println("\nOptions:");
		System.out.println("1. Change Point");
		System.out.println("2. Change State");
		System.out.println("3. Change Payload");
		System.out.println("4. Exit");
		System.out.println();
		System.out.print("Enter your selection: ");
	}
}