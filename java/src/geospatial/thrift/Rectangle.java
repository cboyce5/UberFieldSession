/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package geospatial.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Rectangle implements org.apache.thrift.TBase<Rectangle, Rectangle._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Rectangle");

  private static final org.apache.thrift.protocol.TField TOP_LT_FIELD_DESC = new org.apache.thrift.protocol.TField("top_lt", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TOP_RT_FIELD_DESC = new org.apache.thrift.protocol.TField("top_rt", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField BTM_LT_FIELD_DESC = new org.apache.thrift.protocol.TField("btm_lt", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField BTM_RT_FIELD_DESC = new org.apache.thrift.protocol.TField("btm_rt", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RectangleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RectangleTupleSchemeFactory());
  }

  public Point top_lt; // required
  public Point top_rt; // required
  public Point btm_lt; // required
  public Point btm_rt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOP_LT((short)1, "top_lt"),
    TOP_RT((short)2, "top_rt"),
    BTM_LT((short)3, "btm_lt"),
    BTM_RT((short)4, "btm_rt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOP_LT
          return TOP_LT;
        case 2: // TOP_RT
          return TOP_RT;
        case 3: // BTM_LT
          return BTM_LT;
        case 4: // BTM_RT
          return BTM_RT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOP_LT, new org.apache.thrift.meta_data.FieldMetaData("top_lt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Point.class)));
    tmpMap.put(_Fields.TOP_RT, new org.apache.thrift.meta_data.FieldMetaData("top_rt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Point.class)));
    tmpMap.put(_Fields.BTM_LT, new org.apache.thrift.meta_data.FieldMetaData("btm_lt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Point.class)));
    tmpMap.put(_Fields.BTM_RT, new org.apache.thrift.meta_data.FieldMetaData("btm_rt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Point.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Rectangle.class, metaDataMap);
  }

  public Rectangle() {
  }

  public Rectangle(
    Point top_lt,
    Point top_rt,
    Point btm_lt,
    Point btm_rt)
  {
    this();
    this.top_lt = top_lt;
    this.top_rt = top_rt;
    this.btm_lt = btm_lt;
    this.btm_rt = btm_rt;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Rectangle(Rectangle other) {
    if (other.isSetTop_lt()) {
      this.top_lt = new Point(other.top_lt);
    }
    if (other.isSetTop_rt()) {
      this.top_rt = new Point(other.top_rt);
    }
    if (other.isSetBtm_lt()) {
      this.btm_lt = new Point(other.btm_lt);
    }
    if (other.isSetBtm_rt()) {
      this.btm_rt = new Point(other.btm_rt);
    }
  }

  public Rectangle deepCopy() {
    return new Rectangle(this);
  }

  @Override
  public void clear() {
    this.top_lt = null;
    this.top_rt = null;
    this.btm_lt = null;
    this.btm_rt = null;
  }

  public Point getTop_lt() {
    return this.top_lt;
  }

  public Rectangle setTop_lt(Point top_lt) {
    this.top_lt = top_lt;
    return this;
  }

  public void unsetTop_lt() {
    this.top_lt = null;
  }

  /** Returns true if field top_lt is set (has been assigned a value) and false otherwise */
  public boolean isSetTop_lt() {
    return this.top_lt != null;
  }

  public void setTop_ltIsSet(boolean value) {
    if (!value) {
      this.top_lt = null;
    }
  }

  public Point getTop_rt() {
    return this.top_rt;
  }

  public Rectangle setTop_rt(Point top_rt) {
    this.top_rt = top_rt;
    return this;
  }

  public void unsetTop_rt() {
    this.top_rt = null;
  }

  /** Returns true if field top_rt is set (has been assigned a value) and false otherwise */
  public boolean isSetTop_rt() {
    return this.top_rt != null;
  }

  public void setTop_rtIsSet(boolean value) {
    if (!value) {
      this.top_rt = null;
    }
  }

  public Point getBtm_lt() {
    return this.btm_lt;
  }

  public Rectangle setBtm_lt(Point btm_lt) {
    this.btm_lt = btm_lt;
    return this;
  }

  public void unsetBtm_lt() {
    this.btm_lt = null;
  }

  /** Returns true if field btm_lt is set (has been assigned a value) and false otherwise */
  public boolean isSetBtm_lt() {
    return this.btm_lt != null;
  }

  public void setBtm_ltIsSet(boolean value) {
    if (!value) {
      this.btm_lt = null;
    }
  }

  public Point getBtm_rt() {
    return this.btm_rt;
  }

  public Rectangle setBtm_rt(Point btm_rt) {
    this.btm_rt = btm_rt;
    return this;
  }

  public void unsetBtm_rt() {
    this.btm_rt = null;
  }

  /** Returns true if field btm_rt is set (has been assigned a value) and false otherwise */
  public boolean isSetBtm_rt() {
    return this.btm_rt != null;
  }

  public void setBtm_rtIsSet(boolean value) {
    if (!value) {
      this.btm_rt = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOP_LT:
      if (value == null) {
        unsetTop_lt();
      } else {
        setTop_lt((Point)value);
      }
      break;

    case TOP_RT:
      if (value == null) {
        unsetTop_rt();
      } else {
        setTop_rt((Point)value);
      }
      break;

    case BTM_LT:
      if (value == null) {
        unsetBtm_lt();
      } else {
        setBtm_lt((Point)value);
      }
      break;

    case BTM_RT:
      if (value == null) {
        unsetBtm_rt();
      } else {
        setBtm_rt((Point)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOP_LT:
      return getTop_lt();

    case TOP_RT:
      return getTop_rt();

    case BTM_LT:
      return getBtm_lt();

    case BTM_RT:
      return getBtm_rt();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOP_LT:
      return isSetTop_lt();
    case TOP_RT:
      return isSetTop_rt();
    case BTM_LT:
      return isSetBtm_lt();
    case BTM_RT:
      return isSetBtm_rt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Rectangle)
      return this.equals((Rectangle)that);
    return false;
  }

  public boolean equals(Rectangle that) {
    if (that == null)
      return false;

    boolean this_present_top_lt = true && this.isSetTop_lt();
    boolean that_present_top_lt = true && that.isSetTop_lt();
    if (this_present_top_lt || that_present_top_lt) {
      if (!(this_present_top_lt && that_present_top_lt))
        return false;
      if (!this.top_lt.equals(that.top_lt))
        return false;
    }

    boolean this_present_top_rt = true && this.isSetTop_rt();
    boolean that_present_top_rt = true && that.isSetTop_rt();
    if (this_present_top_rt || that_present_top_rt) {
      if (!(this_present_top_rt && that_present_top_rt))
        return false;
      if (!this.top_rt.equals(that.top_rt))
        return false;
    }

    boolean this_present_btm_lt = true && this.isSetBtm_lt();
    boolean that_present_btm_lt = true && that.isSetBtm_lt();
    if (this_present_btm_lt || that_present_btm_lt) {
      if (!(this_present_btm_lt && that_present_btm_lt))
        return false;
      if (!this.btm_lt.equals(that.btm_lt))
        return false;
    }

    boolean this_present_btm_rt = true && this.isSetBtm_rt();
    boolean that_present_btm_rt = true && that.isSetBtm_rt();
    if (this_present_btm_rt || that_present_btm_rt) {
      if (!(this_present_btm_rt && that_present_btm_rt))
        return false;
      if (!this.btm_rt.equals(that.btm_rt))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Rectangle other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Rectangle typedOther = (Rectangle)other;

    lastComparison = Boolean.valueOf(isSetTop_lt()).compareTo(typedOther.isSetTop_lt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTop_lt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.top_lt, typedOther.top_lt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTop_rt()).compareTo(typedOther.isSetTop_rt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTop_rt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.top_rt, typedOther.top_rt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBtm_lt()).compareTo(typedOther.isSetBtm_lt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBtm_lt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.btm_lt, typedOther.btm_lt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBtm_rt()).compareTo(typedOther.isSetBtm_rt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBtm_rt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.btm_rt, typedOther.btm_rt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Rectangle(");
    boolean first = true;

    sb.append("top_lt:");
    if (this.top_lt == null) {
      sb.append("null");
    } else {
      sb.append(this.top_lt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("top_rt:");
    if (this.top_rt == null) {
      sb.append("null");
    } else {
      sb.append(this.top_rt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("btm_lt:");
    if (this.btm_lt == null) {
      sb.append("null");
    } else {
      sb.append(this.btm_lt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("btm_rt:");
    if (this.btm_rt == null) {
      sb.append("null");
    } else {
      sb.append(this.btm_rt);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (top_lt != null) {
      top_lt.validate();
    }
    if (top_rt != null) {
      top_rt.validate();
    }
    if (btm_lt != null) {
      btm_lt.validate();
    }
    if (btm_rt != null) {
      btm_rt.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RectangleStandardSchemeFactory implements SchemeFactory {
    public RectangleStandardScheme getScheme() {
      return new RectangleStandardScheme();
    }
  }

  private static class RectangleStandardScheme extends StandardScheme<Rectangle> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Rectangle struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOP_LT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.top_lt = new Point();
              struct.top_lt.read(iprot);
              struct.setTop_ltIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOP_RT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.top_rt = new Point();
              struct.top_rt.read(iprot);
              struct.setTop_rtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BTM_LT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.btm_lt = new Point();
              struct.btm_lt.read(iprot);
              struct.setBtm_ltIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BTM_RT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.btm_rt = new Point();
              struct.btm_rt.read(iprot);
              struct.setBtm_rtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Rectangle struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.top_lt != null) {
        oprot.writeFieldBegin(TOP_LT_FIELD_DESC);
        struct.top_lt.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.top_rt != null) {
        oprot.writeFieldBegin(TOP_RT_FIELD_DESC);
        struct.top_rt.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.btm_lt != null) {
        oprot.writeFieldBegin(BTM_LT_FIELD_DESC);
        struct.btm_lt.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.btm_rt != null) {
        oprot.writeFieldBegin(BTM_RT_FIELD_DESC);
        struct.btm_rt.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RectangleTupleSchemeFactory implements SchemeFactory {
    public RectangleTupleScheme getScheme() {
      return new RectangleTupleScheme();
    }
  }

  private static class RectangleTupleScheme extends TupleScheme<Rectangle> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Rectangle struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTop_lt()) {
        optionals.set(0);
      }
      if (struct.isSetTop_rt()) {
        optionals.set(1);
      }
      if (struct.isSetBtm_lt()) {
        optionals.set(2);
      }
      if (struct.isSetBtm_rt()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTop_lt()) {
        struct.top_lt.write(oprot);
      }
      if (struct.isSetTop_rt()) {
        struct.top_rt.write(oprot);
      }
      if (struct.isSetBtm_lt()) {
        struct.btm_lt.write(oprot);
      }
      if (struct.isSetBtm_rt()) {
        struct.btm_rt.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Rectangle struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.top_lt = new Point();
        struct.top_lt.read(iprot);
        struct.setTop_ltIsSet(true);
      }
      if (incoming.get(1)) {
        struct.top_rt = new Point();
        struct.top_rt.read(iprot);
        struct.setTop_rtIsSet(true);
      }
      if (incoming.get(2)) {
        struct.btm_lt = new Point();
        struct.btm_lt.read(iprot);
        struct.setBtm_ltIsSet(true);
      }
      if (incoming.get(3)) {
        struct.btm_rt = new Point();
        struct.btm_rt.read(iprot);
        struct.setBtm_rtIsSet(true);
      }
    }
  }

}

