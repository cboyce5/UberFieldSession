//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
if (typeof geospatial === 'undefined') {
  geospatial = {};
}
if (typeof geospatial.thrift === 'undefined') {
  geospatial.thrift = {};
}
ttypes.FeatureState = {
'CLEAN' : 1,
'DIRTY' : 2
};
geospatial.thrift.Point = module.exports.Point = function(args) {
  this.x = null;
  this.y = null;
  if (args) {
    if (args.x !== undefined) {
      this.x = args.x;
    }
    if (args.y !== undefined) {
      this.y = args.y;
    }
  }
};
geospatial.thrift.Point.prototype = {};
geospatial.thrift.Point.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.x = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.y = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

geospatial.thrift.Point.prototype.write = function(output) {
  output.writeStructBegin('Point');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.y);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

geospatial.thrift.Rectangle = module.exports.Rectangle = function(args) {
  this.top_lt = null;
  this.btm_rt = null;
  if (args) {
    if (args.top_lt !== undefined) {
      this.top_lt = args.top_lt;
    }
    if (args.btm_rt !== undefined) {
      this.btm_rt = args.btm_rt;
    }
  }
};
geospatial.thrift.Rectangle.prototype = {};
geospatial.thrift.Rectangle.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.top_lt = new ttypes.Point();
        this.top_lt.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.btm_rt = new ttypes.Point();
        this.btm_rt.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

geospatial.thrift.Rectangle.prototype.write = function(output) {
  output.writeStructBegin('Rectangle');
  if (this.top_lt !== null && this.top_lt !== undefined) {
    output.writeFieldBegin('top_lt', Thrift.Type.STRUCT, 1);
    this.top_lt.write(output);
    output.writeFieldEnd();
  }
  if (this.btm_rt !== null && this.btm_rt !== undefined) {
    output.writeFieldBegin('btm_rt', Thrift.Type.STRUCT, 2);
    this.btm_rt.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

geospatial.thrift.Feature = module.exports.Feature = function(args) {
  this.grid = null;
  this.id = null;
  this.point = null;
  this.state = null;
  this.payload = '{}';
  if (args) {
    if (args.grid !== undefined) {
      this.grid = args.grid;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.point !== undefined) {
      this.point = args.point;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.payload !== undefined) {
      this.payload = args.payload;
    }
  }
};
geospatial.thrift.Feature.prototype = {};
geospatial.thrift.Feature.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.grid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.point = new ttypes.Point();
        this.point.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.payload = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

geospatial.thrift.Feature.prototype.write = function(output) {
  output.writeStructBegin('Feature');
  if (this.grid !== null && this.grid !== undefined) {
    output.writeFieldBegin('grid', Thrift.Type.STRING, 1);
    output.writeString(this.grid);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.point !== null && this.point !== undefined) {
    output.writeFieldBegin('point', Thrift.Type.STRUCT, 3);
    this.point.write(output);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 4);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.STRING, 5);
    output.writeString(this.payload);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

