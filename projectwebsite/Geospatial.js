//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./geospatial_types');
//HELPER FUNCTIONS AND STRUCTURES

geospatial.thrift.Geospatial_createFeature_args = function(args) {
  this.point = null;
  this.payload = null;
  if (args) {
    if (args.point !== undefined) {
      this.point = args.point;
    }
    if (args.payload !== undefined) {
      this.payload = args.payload;
    }
  }
};
geospatial.thrift.Geospatial_createFeature_args.prototype = {};
geospatial.thrift.Geospatial_createFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.point = new ttypes.Point();
        this.point.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.payload = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

geospatial.thrift.Geospatial_createFeature_args.prototype.write = function(output) {
  output.writeStructBegin('Geospatial_createFeature_args');
  if (this.point !== null && this.point !== undefined) {
    output.writeFieldBegin('point', Thrift.Type.STRUCT, 1);
    this.point.write(output);
    output.writeFieldEnd();
  }
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.STRING, 2);
    output.writeString(this.payload);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

geospatial.thrift.Geospatial_createFeature_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
geospatial.thrift.Geospatial_createFeature_result.prototype = {};
geospatial.thrift.Geospatial_createFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Feature();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

geospatial.thrift.Geospatial_createFeature_result.prototype.write = function(output) {
  output.writeStructBegin('Geospatial_createFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

geospatial.thrift.Geospatial_getFeature_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
geospatial.thrift.Geospatial_getFeature_args.prototype = {};
geospatial.thrift.Geospatial_getFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

geospatial.thrift.Geospatial_getFeature_args.prototype.write = function(output) {
  output.writeStructBegin('Geospatial_getFeature_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

geospatial.thrift.Geospatial_getFeature_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
geospatial.thrift.Geospatial_getFeature_result.prototype = {};
geospatial.thrift.Geospatial_getFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Feature();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

geospatial.thrift.Geospatial_getFeature_result.prototype.write = function(output) {
  output.writeStructBegin('Geospatial_getFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

geospatial.thrift.Geospatial_getFeaturesInRect_args = function(args) {
  this.rect = null;
  if (args) {
    if (args.rect !== undefined) {
      this.rect = args.rect;
    }
  }
};
geospatial.thrift.Geospatial_getFeaturesInRect_args.prototype = {};
geospatial.thrift.Geospatial_getFeaturesInRect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rect = new ttypes.Rectangle();
        this.rect.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

geospatial.thrift.Geospatial_getFeaturesInRect_args.prototype.write = function(output) {
  output.writeStructBegin('Geospatial_getFeaturesInRect_args');
  if (this.rect !== null && this.rect !== undefined) {
    output.writeFieldBegin('rect', Thrift.Type.STRUCT, 1);
    this.rect.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

geospatial.thrift.Geospatial_getFeaturesInRect_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
geospatial.thrift.Geospatial_getFeaturesInRect_result.prototype = {};
geospatial.thrift.Geospatial_getFeaturesInRect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Feature();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

geospatial.thrift.Geospatial_getFeaturesInRect_result.prototype.write = function(output) {
  output.writeStructBegin('Geospatial_getFeaturesInRect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

geospatial.thrift.Geospatial_updateFeature_args = function(args) {
  this.feature = null;
  if (args) {
    if (args.feature !== undefined) {
      this.feature = args.feature;
    }
  }
};
geospatial.thrift.Geospatial_updateFeature_args.prototype = {};
geospatial.thrift.Geospatial_updateFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.feature = new ttypes.Feature();
        this.feature.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

geospatial.thrift.Geospatial_updateFeature_args.prototype.write = function(output) {
  output.writeStructBegin('Geospatial_updateFeature_args');
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRUCT, 1);
    this.feature.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

geospatial.thrift.Geospatial_updateFeature_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
geospatial.thrift.Geospatial_updateFeature_result.prototype = {};
geospatial.thrift.Geospatial_updateFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Feature();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

geospatial.thrift.Geospatial_updateFeature_result.prototype.write = function(output) {
  output.writeStructBegin('Geospatial_updateFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

geospatial.thrift.Geospatial_deleteFeature_args = function(args) {
  this.feature = null;
  if (args) {
    if (args.feature !== undefined) {
      this.feature = args.feature;
    }
  }
};
geospatial.thrift.Geospatial_deleteFeature_args.prototype = {};
geospatial.thrift.Geospatial_deleteFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.feature = new ttypes.Feature();
        this.feature.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

geospatial.thrift.Geospatial_deleteFeature_args.prototype.write = function(output) {
  output.writeStructBegin('Geospatial_deleteFeature_args');
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRUCT, 1);
    this.feature.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

geospatial.thrift.Geospatial_deleteFeature_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
geospatial.thrift.Geospatial_deleteFeature_result.prototype = {};
geospatial.thrift.Geospatial_deleteFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

geospatial.thrift.Geospatial_deleteFeature_result.prototype.write = function(output) {
  output.writeStructBegin('Geospatial_deleteFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

geospatial.thrift.GeospatialClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
geospatial.thrift.GeospatialClient.prototype = {};
geospatial.thrift.GeospatialClient.prototype.createFeature = function(point, payload, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createFeature(point, payload);
};

geospatial.thrift.GeospatialClient.prototype.send_createFeature = function(point, payload) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createFeature', Thrift.MessageType.CALL, this.seqid);
  var args = new geospatial.thrift.Geospatial_createFeature_args();
  args.point = point;
  args.payload = payload;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

geospatial.thrift.GeospatialClient.prototype.recv_createFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new geospatial.thrift.Geospatial_createFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createFeature failed: unknown result');
};
geospatial.thrift.GeospatialClient.prototype.getFeature = function(id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getFeature(id);
};

geospatial.thrift.GeospatialClient.prototype.send_getFeature = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeature', Thrift.MessageType.CALL, this.seqid);
  var args = new geospatial.thrift.Geospatial_getFeature_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

geospatial.thrift.GeospatialClient.prototype.recv_getFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new geospatial.thrift.Geospatial_getFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeature failed: unknown result');
};
geospatial.thrift.GeospatialClient.prototype.getFeaturesInRect = function(rect, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getFeaturesInRect(rect);
};

geospatial.thrift.GeospatialClient.prototype.send_getFeaturesInRect = function(rect) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeaturesInRect', Thrift.MessageType.CALL, this.seqid);
  var args = new geospatial.thrift.Geospatial_getFeaturesInRect_args();
  args.rect = rect;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

geospatial.thrift.GeospatialClient.prototype.recv_getFeaturesInRect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new geospatial.thrift.Geospatial_getFeaturesInRect_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeaturesInRect failed: unknown result');
};
geospatial.thrift.GeospatialClient.prototype.updateFeature = function(feature, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_updateFeature(feature);
};

geospatial.thrift.GeospatialClient.prototype.send_updateFeature = function(feature) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateFeature', Thrift.MessageType.CALL, this.seqid);
  var args = new geospatial.thrift.Geospatial_updateFeature_args();
  args.feature = feature;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

geospatial.thrift.GeospatialClient.prototype.recv_updateFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new geospatial.thrift.Geospatial_updateFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateFeature failed: unknown result');
};
geospatial.thrift.GeospatialClient.prototype.deleteFeature = function(feature, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteFeature(feature);
};

geospatial.thrift.GeospatialClient.prototype.send_deleteFeature = function(feature) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteFeature', Thrift.MessageType.CALL, this.seqid);
  var args = new geospatial.thrift.Geospatial_deleteFeature_args();
  args.feature = feature;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

geospatial.thrift.GeospatialClient.prototype.recv_deleteFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new geospatial.thrift.Geospatial_deleteFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteFeature failed: unknown result');
};
geospatial.thrift.GeospatialProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
geospatial.thrift.GeospatialProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

geospatial.thrift.GeospatialProcessor.prototype.process_createFeature = function(seqid, input, output) {
  var args = new geospatial.thrift.Geospatial_createFeature_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.createFeature(args.point, args.payload, function (err, result) {
    var result = new geospatial.thrift.Geospatial_createFeature_result((err != null ? err : {success: result}));
    output.writeMessageBegin("createFeature", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

geospatial.thrift.GeospatialProcessor.prototype.process_getFeature = function(seqid, input, output) {
  var args = new geospatial.thrift.Geospatial_getFeature_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getFeature(args.id, function (err, result) {
    var result = new geospatial.thrift.Geospatial_getFeature_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getFeature", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

geospatial.thrift.GeospatialProcessor.prototype.process_getFeaturesInRect = function(seqid, input, output) {
  var args = new geospatial.thrift.Geospatial_getFeaturesInRect_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getFeaturesInRect(args.rect, function (err, result) {
    var result = new geospatial.thrift.Geospatial_getFeaturesInRect_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getFeaturesInRect", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

geospatial.thrift.GeospatialProcessor.prototype.process_updateFeature = function(seqid, input, output) {
  var args = new geospatial.thrift.Geospatial_updateFeature_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.updateFeature(args.feature, function (err, result) {
    var result = new geospatial.thrift.Geospatial_updateFeature_result((err != null ? err : {success: result}));
    output.writeMessageBegin("updateFeature", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

geospatial.thrift.GeospatialProcessor.prototype.process_deleteFeature = function(seqid, input, output) {
  var args = new geospatial.thrift.Geospatial_deleteFeature_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteFeature(args.feature, function (err, result) {
    var result = new geospatial.thrift.Geospatial_deleteFeature_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteFeature", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

