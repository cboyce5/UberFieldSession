/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace geospatial.thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Feature : TBase
  {
    private string _grid;
    private string _id;
    private Point _point;
    private FeatureState _state;
    private string _payload;

    public string Grid
    {
      get
      {
        return _grid;
      }
      set
      {
        __isset.grid = true;
        this._grid = value;
      }
    }

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public Point Point
    {
      get
      {
        return _point;
      }
      set
      {
        __isset.point = true;
        this._point = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="FeatureState"/>
    /// </summary>
    public FeatureState State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }

    public string Payload
    {
      get
      {
        return _payload;
      }
      set
      {
        __isset.payload = true;
        this._payload = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool grid;
      public bool id;
      public bool point;
      public bool state;
      public bool payload;
    }

    public Feature() {
      this._payload = "{}";
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Grid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Point = new Point();
              Point.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              State = (FeatureState)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Payload = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Feature");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Grid != null && __isset.grid) {
        field.Name = "grid";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Grid);
        oprot.WriteFieldEnd();
      }
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (Point != null && __isset.point) {
        field.Name = "point";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Point.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)State);
        oprot.WriteFieldEnd();
      }
      if (Payload != null && __isset.payload) {
        field.Name = "payload";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Payload);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Feature(");
      sb.Append("Grid: ");
      sb.Append(Grid);
      sb.Append(",Id: ");
      sb.Append(Id);
      sb.Append(",Point: ");
      sb.Append(Point== null ? "<null>" : Point.ToString());
      sb.Append(",State: ");
      sb.Append(State);
      sb.Append(",Payload: ");
      sb.Append(Payload);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
