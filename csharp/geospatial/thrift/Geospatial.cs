/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace geospatial.thrift
{
  public partial class Geospatial {
    public interface Iface {
      Feature createFeature(Point point, string payload);
      #if SILVERLIGHT
      IAsyncResult Begin_createFeature(AsyncCallback callback, object state, Point point, string payload);
      Feature End_createFeature(IAsyncResult asyncResult);
      #endif
      Feature getFeature(string id);
      #if SILVERLIGHT
      IAsyncResult Begin_getFeature(AsyncCallback callback, object state, string id);
      Feature End_getFeature(IAsyncResult asyncResult);
      #endif
      List<Feature> getFeaturesInRect(Rectangle rect);
      #if SILVERLIGHT
      IAsyncResult Begin_getFeaturesInRect(AsyncCallback callback, object state, Rectangle rect);
      List<Feature> End_getFeaturesInRect(IAsyncResult asyncResult);
      #endif
      bool saveFeature(Feature feature);
      #if SILVERLIGHT
      IAsyncResult Begin_saveFeature(AsyncCallback callback, object state, Feature feature);
      bool End_saveFeature(IAsyncResult asyncResult);
      #endif
      bool deleteFeature(Feature feature);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteFeature(AsyncCallback callback, object state, Feature feature);
      bool End_deleteFeature(IAsyncResult asyncResult);
      #endif
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      
      #if SILVERLIGHT
      public IAsyncResult Begin_createFeature(AsyncCallback callback, object state, Point point, string payload)
      {
        return send_createFeature(callback, state, point, payload);
      }

      public Feature End_createFeature(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createFeature();
      }

      #endif

      public Feature createFeature(Point point, string payload)
      {
        #if !SILVERLIGHT
        send_createFeature(point, payload);
        return recv_createFeature();

        #else
        var asyncResult = Begin_createFeature(null, null, point, payload);
        return End_createFeature(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createFeature(AsyncCallback callback, object state, Point point, string payload)
      #else
      public void send_createFeature(Point point, string payload)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createFeature", TMessageType.Call, seqid_));
        createFeature_args args = new createFeature_args();
        args.Point = point;
        args.Payload = payload;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Feature recv_createFeature()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createFeature_result result = new createFeature_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createFeature failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getFeature(AsyncCallback callback, object state, string id)
      {
        return send_getFeature(callback, state, id);
      }

      public Feature End_getFeature(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getFeature();
      }

      #endif

      public Feature getFeature(string id)
      {
        #if !SILVERLIGHT
        send_getFeature(id);
        return recv_getFeature();

        #else
        var asyncResult = Begin_getFeature(null, null, id);
        return End_getFeature(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getFeature(AsyncCallback callback, object state, string id)
      #else
      public void send_getFeature(string id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getFeature", TMessageType.Call, seqid_));
        getFeature_args args = new getFeature_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Feature recv_getFeature()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getFeature_result result = new getFeature_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFeature failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getFeaturesInRect(AsyncCallback callback, object state, Rectangle rect)
      {
        return send_getFeaturesInRect(callback, state, rect);
      }

      public List<Feature> End_getFeaturesInRect(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getFeaturesInRect();
      }

      #endif

      public List<Feature> getFeaturesInRect(Rectangle rect)
      {
        #if !SILVERLIGHT
        send_getFeaturesInRect(rect);
        return recv_getFeaturesInRect();

        #else
        var asyncResult = Begin_getFeaturesInRect(null, null, rect);
        return End_getFeaturesInRect(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getFeaturesInRect(AsyncCallback callback, object state, Rectangle rect)
      #else
      public void send_getFeaturesInRect(Rectangle rect)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getFeaturesInRect", TMessageType.Call, seqid_));
        getFeaturesInRect_args args = new getFeaturesInRect_args();
        args.Rect = rect;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Feature> recv_getFeaturesInRect()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getFeaturesInRect_result result = new getFeaturesInRect_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFeaturesInRect failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_saveFeature(AsyncCallback callback, object state, Feature feature)
      {
        return send_saveFeature(callback, state, feature);
      }

      public bool End_saveFeature(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_saveFeature();
      }

      #endif

      public bool saveFeature(Feature feature)
      {
        #if !SILVERLIGHT
        send_saveFeature(feature);
        return recv_saveFeature();

        #else
        var asyncResult = Begin_saveFeature(null, null, feature);
        return End_saveFeature(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_saveFeature(AsyncCallback callback, object state, Feature feature)
      #else
      public void send_saveFeature(Feature feature)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("saveFeature", TMessageType.Call, seqid_));
        saveFeature_args args = new saveFeature_args();
        args.Feature = feature;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_saveFeature()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        saveFeature_result result = new saveFeature_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "saveFeature failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteFeature(AsyncCallback callback, object state, Feature feature)
      {
        return send_deleteFeature(callback, state, feature);
      }

      public bool End_deleteFeature(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_deleteFeature();
      }

      #endif

      public bool deleteFeature(Feature feature)
      {
        #if !SILVERLIGHT
        send_deleteFeature(feature);
        return recv_deleteFeature();

        #else
        var asyncResult = Begin_deleteFeature(null, null, feature);
        return End_deleteFeature(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteFeature(AsyncCallback callback, object state, Feature feature)
      #else
      public void send_deleteFeature(Feature feature)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteFeature", TMessageType.Call, seqid_));
        deleteFeature_args args = new deleteFeature_args();
        args.Feature = feature;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_deleteFeature()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteFeature_result result = new deleteFeature_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteFeature failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["createFeature"] = createFeature_Process;
        processMap_["getFeature"] = getFeature_Process;
        processMap_["getFeaturesInRect"] = getFeaturesInRect_Process;
        processMap_["saveFeature"] = saveFeature_Process;
        processMap_["deleteFeature"] = deleteFeature_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void createFeature_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createFeature_args args = new createFeature_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createFeature_result result = new createFeature_result();
        result.Success = iface_.createFeature(args.Point, args.Payload);
        oprot.WriteMessageBegin(new TMessage("createFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getFeature_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getFeature_args args = new getFeature_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getFeature_result result = new getFeature_result();
        result.Success = iface_.getFeature(args.Id);
        oprot.WriteMessageBegin(new TMessage("getFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getFeaturesInRect_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getFeaturesInRect_args args = new getFeaturesInRect_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getFeaturesInRect_result result = new getFeaturesInRect_result();
        result.Success = iface_.getFeaturesInRect(args.Rect);
        oprot.WriteMessageBegin(new TMessage("getFeaturesInRect", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void saveFeature_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        saveFeature_args args = new saveFeature_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        saveFeature_result result = new saveFeature_result();
        result.Success = iface_.saveFeature(args.Feature);
        oprot.WriteMessageBegin(new TMessage("saveFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteFeature_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteFeature_args args = new deleteFeature_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteFeature_result result = new deleteFeature_result();
        result.Success = iface_.deleteFeature(args.Feature);
        oprot.WriteMessageBegin(new TMessage("deleteFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createFeature_args : TBase
    {
      private Point _point;
      private string _payload;

      public Point Point
      {
        get
        {
          return _point;
        }
        set
        {
          __isset.point = true;
          this._point = value;
        }
      }

      public string Payload
      {
        get
        {
          return _payload;
        }
        set
        {
          __isset.payload = true;
          this._payload = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool point;
        public bool payload;
      }

      public createFeature_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Point = new Point();
                Point.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Payload = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createFeature_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Point != null && __isset.point) {
          field.Name = "point";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Point.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Payload != null && __isset.payload) {
          field.Name = "payload";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Payload);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createFeature_args(");
        sb.Append("Point: ");
        sb.Append(Point== null ? "<null>" : Point.ToString());
        sb.Append(",Payload: ");
        sb.Append(Payload);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createFeature_result : TBase
    {
      private Feature _success;

      public Feature Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public createFeature_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Feature();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createFeature_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createFeature_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFeature_args : TBase
    {
      private string _id;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public getFeature_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFeature_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getFeature_args(");
        sb.Append("Id: ");
        sb.Append(Id);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFeature_result : TBase
    {
      private Feature _success;

      public Feature Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getFeature_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Feature();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFeature_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getFeature_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFeaturesInRect_args : TBase
    {
      private Rectangle _rect;

      public Rectangle Rect
      {
        get
        {
          return _rect;
        }
        set
        {
          __isset.rect = true;
          this._rect = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool rect;
      }

      public getFeaturesInRect_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Rect = new Rectangle();
                Rect.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFeaturesInRect_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Rect != null && __isset.rect) {
          field.Name = "rect";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Rect.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getFeaturesInRect_args(");
        sb.Append("Rect: ");
        sb.Append(Rect== null ? "<null>" : Rect.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFeaturesInRect_result : TBase
    {
      private List<Feature> _success;

      public List<Feature> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getFeaturesInRect_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Feature>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    Feature _elem2 = new Feature();
                    _elem2 = new Feature();
                    _elem2.Read(iprot);
                    Success.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFeaturesInRect_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Feature _iter3 in Success)
              {
                _iter3.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getFeaturesInRect_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveFeature_args : TBase
    {
      private Feature _feature;

      public Feature Feature
      {
        get
        {
          return _feature;
        }
        set
        {
          __isset.feature = true;
          this._feature = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool feature;
      }

      public saveFeature_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Feature = new Feature();
                Feature.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveFeature_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Feature != null && __isset.feature) {
          field.Name = "feature";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Feature.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("saveFeature_args(");
        sb.Append("Feature: ");
        sb.Append(Feature== null ? "<null>" : Feature.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveFeature_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public saveFeature_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveFeature_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("saveFeature_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteFeature_args : TBase
    {
      private Feature _feature;

      public Feature Feature
      {
        get
        {
          return _feature;
        }
        set
        {
          __isset.feature = true;
          this._feature = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool feature;
      }

      public deleteFeature_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Feature = new Feature();
                Feature.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteFeature_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Feature != null && __isset.feature) {
          field.Name = "feature";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Feature.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteFeature_args(");
        sb.Append("Feature: ");
        sb.Append(Feature== null ? "<null>" : Feature.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteFeature_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public deleteFeature_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteFeature_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteFeature_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
